{"version":3,"sources":["comp/trailer.js","comp/actors.js","comp/cards.js","comp/card.js","comp/input.js","comp/App.js","serviceWorker.js","index.js"],"names":["Trailer","props","url","trailer","className","style","width","height","frameBorder","type","src","Actors","Card","Img","variant","img","alt","name","character","Cards","result","useState","showPopup","setShowPopup","trailerKey","setTrailerKey","cast","setCast","apiKey","id","credit","Close","useEffect","axios","then","data","results","console","log","trailerMovie","i","length","toLowerCase","split","a","key","actors","slice","onClick","poster_path","Modal","show","onHide","centered","size","Header","Title","original_title","release_date","substring","Body","color","vote_average","original_language","overview","justifyContent","map","profile_path","Footer","Button","CardsList","Input","handle","search","onChange","placeholder","onKeyPress","App","api","query","movies","setMovies","alignItems","e","s","target","value","prevState","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4fb2319c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Trailer = (props) => {\r\n  let url = `https://www.youtube.com/embed/${props.trailer}`;\r\n  return (\r\n    <div className=\"iframe\">\r\n      <embed\r\n        style={{ width: \"580px\", height: \"350px\" }}\r\n        frameBorder=\"0\"\r\n        type=\"video/webm\"\r\n        src={url}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Trailer;\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nconst Actors = (props) => {\r\n  return (\r\n    <div>\r\n      <Card className=\"cardactors\">\r\n        <Card.Img\r\n          variant=\"top\"\r\n          src={`https://image.tmdb.org/t/p/w185/` + props.img}\r\n          alt=\"no image found\"\r\n        />\r\n        <p className=\"name\">{props.name}</p>\r\n        <p className=\"character\">\r\n          <i>{props.character}</i>\r\n        </p>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Actors;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport Trailer from \"./trailer\";\r\nimport Actors from \"./actors\";\r\nimport { IoIosStarOutline } from \"react-icons/io\";\r\nimport { MdLanguage } from \"react-icons/md\";\r\n\r\nconst Cards = ({ result }) => {\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [trailerKey, setTrailerKey] = useState([]);\r\n  const [cast, setCast] = useState([]);\r\n  const apiKey = \"fac34116c639f3e75cd5205251be421c\";\r\n  const trailer = `https://api.themoviedb.org/3/movie/${result.id}/videos?api_key=${apiKey}&append_to_respone=videos`;\r\n  const credit = `https://api.themoviedb.org/3/movie/${result.id}/credits?api_key=${apiKey}`;\r\n  const Open = () => setShowPopup(true);\r\n  const Close = () => setShowPopup(false);\r\n\r\n  useEffect(() => {\r\n    axios(trailer).then(({ data }) => {\r\n      setTrailerKey(data.results);\r\n      console.log(data);\r\n    });\r\n  }, [trailer]);\r\n\r\n  let trailerMovie = \"\";\r\n\r\n  for (let i = 0; i < trailerKey.length; i++) {\r\n    let name = trailerKey[i].name.toLowerCase().split(\" \");\r\n    for (let a = 0; a < name.length; a++) {\r\n      if (name[a] === \"official\" && name[a] === \"trailer\") {\r\n        trailerMovie = trailerKey[i].key;\r\n        name = trailerKey[i].name;\r\n      }\r\n      if (name[a] === \"trailer\") {\r\n        trailerMovie = trailerKey[i].key;\r\n        name = trailerKey[i].name;\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios(credit).then(({ data }) => {\r\n      const actors = data.cast.slice(0, 8);\r\n      setCast(actors);\r\n    });\r\n  }, [credit]);\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"movie\" style={{ width: \"13rem\" }} onClick={Open}>\r\n        <button>\r\n          <Card.Img\r\n            variant=\"top\"\r\n            src={`https://image.tmdb.org/t/p/w185/` + result.poster_path}\r\n            alt=\"no image found\"\r\n          />\r\n        </button>\r\n      </Card>\r\n      <Modal show={showPopup} onHide={Close} centered size=\"lg\">\r\n        <div className=\"popup\">\r\n          <Modal.Header>\r\n            <Modal.Title>\r\n              <div className=\"titlemovie\">\r\n                {result.original_title}({result.release_date.substring(0, 4)})\r\n              </div>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"container-fluid\">\r\n              <div className=\"discription\">\r\n                <div className=\"row\">\r\n                  <div className=\"modalimg\">\r\n                    <img\r\n                      src={\r\n                        \"https://image.tmdb.org/t/p/w185/\" + result.poster_path\r\n                      }\r\n                      alt=\"ok\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"text\">\r\n                    <div className=\"data\">\r\n                      <p>\r\n                        <IoIosStarOutline style={{ color: \"yellow\" }} />\r\n                        <IoIosStarOutline style={{ color: \"yellow\" }} />\r\n                        <IoIosStarOutline style={{ color: \"yellow\" }} />\r\n                        {result.vote_average}\r\n                      </p>\r\n                      <p>\r\n                        <MdLanguage />\r\n                        {result.original_language}\r\n                      </p>\r\n                    </div>\r\n                    <h5> {result.overview}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <Trailer trailer={trailerMovie} />\r\n            <div className=\"actors\">\r\n              <div className=\"row\" style={{ justifyContent: \"space-evenly\" }}>\r\n                {cast.map((cast) => (\r\n                  <Actors\r\n                    key={cast.id}\r\n                    name={cast.name}\r\n                    character={cast.character}\r\n                    img={cast.profile_path}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={Close}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport Cards from \"./cards\";\r\n\r\nconst CardsList = ({ results }) => {\r\n  return (\r\n    <div className=\"style\">\r\n      <div className=\"row\" style={{ justifyContent: \"space-evenly\" }}>\r\n        {results.map((result) => (\r\n          <Cards key={result.id} result={result} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CardsList;\r\n","import React from \"react\";\r\nconst Input = ({ handle, search }) => {\r\n  return (\r\n    <form>\r\n      <input\r\n        onChange={handle}\r\n        type=\"text\"\r\n        name=\"movie\"\r\n        placeholder=\"Search for a Movie...\"\r\n        onKeyPress={search}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport CardsList from \"./card\";\nimport Input from \"./input\";\nimport \"../app.css\";\nconst App = () => {\n  const apiKey = \"fac34116c639f3e75cd5205251be421c\";\n  const api = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}`;\n\n  const [movies, setMovies] = useState({\n    query: \"\",\n    result: [],\n  });\n\n  const handle = (e) => {\n    let s = e.target.value;\n    setMovies((prevState) => {\n      return { ...prevState, query: s };\n    });\n  };\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(api + `&query=` + movies.query).then(({ data }) => {\n        let result = data.results;\n\n        setMovies((prevState) => {\n          return { ...prevState, result: result };\n        });\n      });\n\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <div\n          className=\"row\"\n          style={{\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n          }}\n        >\n          <h1>Quarantine Movies</h1>\n          <Input handle={handle} search={search} />\n        </div>\n      </div>\n      <div className=\"\">\n        <CardsList key={movies.id} results={movies.result} />\n        {console.log(movies)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./comp/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
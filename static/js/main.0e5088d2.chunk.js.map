{"version":3,"sources":["comp/trailer.js","comp/actors.js","comp/cards.js","comp/card.js","comp/input.js","comp/mainimage.js","comp/app.js","serviceWorker.js","index.js"],"names":["Trailer","props","url","trailer","className","style","width","height","frameBorder","type","src","Actors","Card","Img","variant","img","alt","name","character","Cards","useState","showPopup","setShowPopup","trailerKey","setTrailerKey","cast","setCast","apiKey","id","credit","Close","useEffect","axios","then","data","results","trailerMovie","i","length","toLowerCase","split","a","key","actors","slice","onClick","Modal","show","onHide","centered","size","Header","Title","title","release_date","substring","Body","vote_average","original_language","overview","justifyContent","map","profile_path","Footer","Button","CardsList","genree","result","original_title","backdrop_path","poster_path","genre","genre_ids","Input","onChange","handle","placeholder","search","MainImage","topImage","Carousel","Item","Caption","App","api","latestMovies","currentPage","setCurrentPage","btn","setBtn","lm","setLm","setTopImage","query","movies","setMovies","prevState","fetchNewPage","path","page","alignItems","e","s","target","value","preventDefault","newPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e5088d2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Trailer = (props) => {\r\n  let url = `https://www.youtube.com/embed/${props.trailer}`;\r\n  return (\r\n    <div className=\"iframe\">\r\n      <embed\r\n        style={{ width: \"580px\", height: \"350px\" }}\r\n        frameBorder=\"0\"\r\n        type=\"text/html\"\r\n        src={url}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Trailer;\r\n","import React from \"react\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nconst Actors = (props) => {\r\n  return (\r\n    <div>\r\n      <Card className=\"cardactors\">\r\n        <Card.Img\r\n          variant=\"top\"\r\n          src={`http://image.tmdb.org/t/p/w185/` + props.img}\r\n          alt=\"no image found\"\r\n        />\r\n        <p className=\"name\">{props.name}</p>\r\n        <p className=\"character\">\r\n          <i>{props.character}</i>\r\n        </p>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Actors;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport Trailer from \"./trailer\";\r\nimport Actors from \"./actors\";\r\nimport { MdLanguage } from \"react-icons/md\";\r\n\r\nconst Cards = (props) => {\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [trailerKey, setTrailerKey] = useState([]);\r\n  const [cast, setCast] = useState([]);\r\n  const apiKey = \"fac34116c639f3e75cd5205251be421c\";\r\n  const trailer = `https://api.themoviedb.org/3/movie/${props.id}/videos?api_key=${apiKey}&append_to_respone=videos`;\r\n  const credit = `https://api.themoviedb.org/3/movie/${props.id}/credits?api_key=${apiKey}`;\r\n  const Open = () => setShowPopup(true);\r\n  const Close = () => setShowPopup(false);\r\n\r\n  useEffect(() => {\r\n    axios(trailer).then(({ data }) => {\r\n      setTrailerKey(data.results);\r\n    });\r\n  }, [trailer]);\r\n\r\n  let trailerMovie = \"\";\r\n\r\n  for (let i = 0; i < trailerKey.length; i++) {\r\n    let name = trailerKey[i].name.toLowerCase().split(\" \");\r\n    for (let a = 0; a < name.length; a++) {\r\n      if (name[a] === \"official\" && name[a] === \"trailer\") {\r\n        trailerMovie = trailerKey[i].key;\r\n        name = trailerKey[i].name;\r\n      }\r\n      if (name[a] === \"trailer\") {\r\n        trailerMovie = trailerKey[i].key;\r\n        name = trailerKey[i].name;\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios(credit).then(({ data }) => {\r\n      const actors = data.cast.slice(0, 8);\r\n      setCast(actors);\r\n    });\r\n  }, [credit]);\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"movie\" style={{ width: \"14rem\" }} onClick={Open}>\r\n        <button className=\"buttoncard\">\r\n          <Card.Img\r\n            variant=\"top\"\r\n            src={`https://image.tmdb.org/t/p/w185/` + props.img}\r\n            alt=\"no image found\"\r\n          />\r\n        </button>\r\n      </Card>\r\n      <Modal show={showPopup} onHide={Close} centered size=\"lg\">\r\n        <div className=\"popup\">\r\n          <Modal.Header>\r\n            <Modal.Title>\r\n              <div className=\"titlemovie\">\r\n                {props.title}({props.release_date.substring(0, 4)})\r\n              </div>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"container-fluid\">\r\n              <div className=\"discription\">\r\n                <div className=\"row\">\r\n                  <div className=\"modalimg\">\r\n                    <img\r\n                      src={\"https://image.tmdb.org/t/p/w185/\" + props.img}\r\n                      alt=\"ok\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"text\">\r\n                    <div className=\"data\">\r\n                      <p> IMBd:{props.vote_average}</p>\r\n                      <p>\r\n                        <MdLanguage className=\"earth\" />\r\n                        {props.original_language}\r\n                      </p>\r\n                    </div>\r\n                    <h5> {props.overview}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <Trailer trailer={trailerMovie} />\r\n            <div className=\"actors\">\r\n              <div className=\"row\" style={{ justifyContent: \"space-evenly\" }}>\r\n                {cast.map((cast) => (\r\n                  <Actors\r\n                    key={cast.id}\r\n                    name={cast.name}\r\n                    character={cast.character}\r\n                    img={cast.profile_path}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={Close}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport Cards from \"./cards\";\r\n\r\nconst CardsList = ({ results, genree }) => {\r\n  return (\r\n    <div className=\"style\">\r\n      <div\r\n        className=\"row\"\r\n        style={{ justifyContent: \"space-evenly\", width: \"100%\" }}\r\n      >\r\n        {results.map((result) => (\r\n          <Cards\r\n            key={result.id}\r\n            id={result.id}\r\n            title={result.original_title}\r\n            backdrop_path={result.backdrop_path}\r\n            img={result.poster_path}\r\n            overview={result.overview}\r\n            original_language={result.original_language}\r\n            vote_average={result.vote_average}\r\n            release_date={result.release_date}\r\n            genre={result.genre_ids}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CardsList;\r\n","import React from \"react\";\r\n\r\nconst Input = (props) => {\r\n  return (\r\n    <form>\r\n      <input\r\n        onChange={props.handle}\r\n        type=\"text\"\r\n        name=\"movie\"\r\n        placeholder=\"Search for a Movie...\"\r\n      />\r\n      <button className=\"search\" type=\"submit\" onClick={props.search}>\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Carousel from \"react-bootstrap/Carousel\";\r\n\r\nconst MainImage = ({ topImage }) => {\r\n  return (\r\n    <div>\r\n      <Carousel>\r\n        {topImage.map((topImage) => (\r\n          <Carousel.Item key={topImage.id}>\r\n            <img\r\n              className=\"d-block w-100\"\r\n              src={\"https://image.tmdb.org/t/p/w1280/\" + topImage.backdrop_path}\r\n              alt=\"\"\r\n            />\r\n            <Carousel.Caption>\r\n              <h3>{topImage.original_title}</h3>\r\n              <p>{topImage.overview.substring(0, 100)}</p>\r\n            </Carousel.Caption>\r\n          </Carousel.Item>\r\n        ))}\r\n      </Carousel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainImage;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CardsList from \"./card\";\nimport Input from \"./input\";\nimport MainImage from \"./mainimage\";\nimport \"../app.css\";\n\nconst App = () => {\n  const apiKey = \"fac34116c639f3e75cd5205251be421c\";\n  const api = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&page=1&include_adult=false&genre_id=28`;\n  const latestMovies = `https://api.themoviedb.org/3/movie/now_playing?api_key=${apiKey}&language=en-US&page=1`;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [btn, setBtn] = useState(\"Load More...\");\n  const [lm, setLm] = useState(\"Latest Movies\");\n  const [topImage, setTopImage] = useState([]);\n  const [movies, setMovies] = useState({\n    query: \"\",\n    result: [],\n  });\n\n  useEffect(() => {\n    axios(latestMovies).then(({ data }) => {\n      setTopImage(data.results.slice(0, 5));\n    });\n  }, [latestMovies]);\n\n  useEffect(() => {\n    axios(latestMovies).then(({ data }) => {\n      let result = data.results;\n      setMovies((prevState) => {\n        return { ...prevState, result: result };\n      });\n    });\n  }, [latestMovies]);\n\n  const handle = (e) => {\n    let s = e.target.value;\n    setMovies((prevState) => {\n      return { ...prevState, query: s };\n    });\n  };\n\n  const search = (e) => {\n    axios(api + `&query=` + movies.query).then(({ data }) => {\n      let result = data.results;\n      setMovies((prevState) => {\n        return { ...prevState, result: result };\n      });\n    });\n    e.preventDefault();\n    setLm(\"\");\n    setBtn();\n  };\n\n  useEffect(() => {\n    const newPage = latestMovies;\n    fetchNewPage(newPage);\n  }, [latestMovies]);\n\n  const fetchNewPage = (path) => {\n    axios(path).then(({ data }) => {\n      let result = data.results;\n      setMovies((prevState) => {\n        return { ...prevState, result: result };\n      });\n      setCurrentPage(data.page);\n    });\n  };\n\n  const load = () => {\n    const newPage = `https://api.themoviedb.org/3/movie/now_playing?api_key=${apiKey}&language=en-US&page=${currentPage +\n      1}`;\n    fetchNewPage(newPage);\n  };\n\n  return (\n    <div>\n      <div className=\"top\" style={{ width: \"100%\" }}>\n        <MainImage key={topImage.id} topImage={topImage} />\n      </div>\n      <div className=\"header\">\n        <div\n          className=\"row\"\n          style={{\n            justifyContent: \"space-evenly\",\n            alignItems: \"center\",\n            width: \"100%\",\n          }}\n        >\n          <h1>Quarantine Movies</h1>\n          <Input handle={handle} search={search} />\n        </div>\n      </div>\n\n      <div className=\"\">\n        <div className=\"latestM\">\n          <p className=\"latest\">{lm}</p>\n        </div>\n        <CardsList\n          key={movies.id}\n          genre={movies.genre}\n          results={movies.result}\n        />\n\n        <div className=\"loadbutton\">\n          <button className=\"loadmore\" onClick={load}>\n            {btn}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./comp/app\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}